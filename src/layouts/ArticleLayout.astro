---
import BaseLayout from './BaseLayout.astro';
import type { CollectionEntry } from 'astro:content';
import { formatDate } from '../utils/formatDate';

export interface Props {
  entry: CollectionEntry<'blog'>;
  relatedArticles?: CollectionEntry<'blog'>[];
}

const { entry, relatedArticles = [] } = Astro.props;
const { Content, headings } = await entry.render();
const { data } = entry;

// Generate table of contents from headings
const toc = headings.filter(h => h.depth <= 3).map(h => ({
  ...h,
  children: headings.filter(child => 
    child.depth === h.depth + 1 && 
    child.slug.startsWith(h.slug)
  )
}));

// Calculate reading time (rough estimate)
const wordsPerMinute = 200;
const readingTime = Math.ceil(entry.body.split(' ').length / wordsPerMinute);

// Generate structured data
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  headline: data.title,
  description: data.description,
  author: {
    '@type': 'Person',
    name: data.author
  },
  datePublished: data.pubDate.toISOString(),
  dateModified: data.updatedDate?.toISOString() || data.pubDate.toISOString(),
  publisher: {
    '@type': 'Organization',
    name: 'Mars Terraforming Explorer'
  },
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': Astro.url.href
  },
  keywords: data.tags.join(', ')
};
---

<BaseLayout
  title={data.seo?.title || data.title}
  description={data.seo?.description || data.description}
  ogImage={data.seo?.ogImage}
  pubDate={data.pubDate}
  updatedDate={data.updatedDate}
  author={data.author}
  tags={data.tags}
  structuredData={structuredData}
>
  <article class="article-layout">
    <!-- Article Header -->
    <header class="article-header max-w-4xl mx-auto px-4 py-8">
      <div class="mb-6">
        <div class="flex items-center gap-2 text-sm text-gray-400 mb-2">
          <span class="bg-mars-red/20 text-mars-orange px-2 py-1 rounded text-xs font-medium">
            {data.category.replace('-', ' ').toUpperCase()}
          </span>
          {data.subcategory && (
            <span class="text-gray-500">â€¢</span>
            <span class="text-gray-400">{data.subcategory}</span>
          )}
        </div>
        
        <h1 class="text-4xl md:text-5xl font-display font-bold text-white mb-4 leading-tight">
          {data.title}
        </h1>
        
        <p class="text-xl text-gray-300 leading-relaxed max-w-3xl">
          {data.description}
        </p>
      </div>
      
      <div class="flex flex-wrap items-center gap-6 text-sm text-gray-400 border-t border-gray-800 pt-6">
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
          <span>{data.author}</span>
        </div>
        
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <time datetime={data.pubDate.toISOString()}>
            {formatDate(data.pubDate)}
          </time>
        </div>
        
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>{readingTime} min read</span>
        </div>
        
        {data.updatedDate && (
          <div class="flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            <span>Updated {formatDate(data.updatedDate)}</span>
          </div>
        )}
      </div>
      
      {data.tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mt-6">
          {data.tags.map(tag => (
            <span class="bg-gray-800 text-gray-300 px-3 py-1 rounded-full text-sm">
              #{tag}
            </span>
          ))}
        </div>
      )}
    </header>

    <div class="max-w-7xl mx-auto px-4 grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- Table of Contents -->
      {toc.length > 0 && (
        <aside class="lg:col-span-1">
          <div class="sticky top-24 bg-gray-900/50 backdrop-blur-sm rounded-lg p-6 border border-gray-800">
            <h2 class="font-display font-semibold text-white mb-4 text-lg">Contents</h2>
            <nav class="toc">
              <ul class="space-y-2">
                {toc.map(heading => (
                  <li>
                    <a 
                      href={`#${heading.slug}`}
                      class="block text-gray-400 hover:text-mars-orange transition-colors text-sm py-1"
                      data-toc-level={heading.depth}
                    >
                      {heading.text}
                    </a>
                    {heading.children && heading.children.length > 0 && (
                      <ul class="ml-4 mt-1 space-y-1">
                        {heading.children.map(child => (
                          <li>
                            <a 
                              href={`#${child.slug}`}
                              class="block text-gray-500 hover:text-mars-tan transition-colors text-xs py-1"
                              data-toc-level={child.depth}
                            >
                              {child.text}
                            </a>
                          </li>
                        ))}
                      </ul>
                    )}
                  </li>
                ))}
              </ul>
            </nav>
          </div>
        </aside>
      )}

      <!-- Article Content -->
      <div class={`${toc.length > 0 ? 'lg:col-span-3' : 'lg:col-span-4'}`}>
        <div class="article-content prose prose-mars dark:prose-invert max-w-none">
          <Content />
        </div>
        
        <!-- Article Footer -->
        <footer class="mt-16 pt-8 border-t border-gray-800">
          <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-6">
            <!-- Share Buttons -->
            <div class="flex items-center gap-4">
              <span class="text-gray-400 font-medium">Share:</span>
              <div class="flex gap-2">
                <a 
                  href={`https://twitter.com/intent/tweet?url=${encodeURIComponent(Astro.url.href)}&text=${encodeURIComponent(data.title)}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="bg-gray-800 hover:bg-blue-600 text-gray-300 hover:text-white p-2 rounded transition-colors"
                >
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M6.29 18.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0020 3.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.073 4.073 0 01.8 7.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 010 16.407a11.616 11.616 0 006.29 1.84" />
                  </svg>
                </a>
                <a 
                  href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(Astro.url.href)}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="bg-gray-800 hover:bg-blue-700 text-gray-300 hover:text-white p-2 rounded transition-colors"
                >
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.338 16.338H13.67V12.16c0-.995-.017-2.277-1.387-2.277-1.39 0-1.601 1.086-1.601 2.207v4.248H8.014v-8.59h2.559v1.174h.037c.356-.675 1.227-1.387 2.526-1.387 2.703 0 3.203 1.778 3.203 4.092v4.711zM5.005 6.575a1.548 1.548 0 11-.003-3.096 1.548 1.548 0 01.003 3.096zm-1.337 9.763H6.34v-8.59H3.667v8.59zM17.668 1H2.328C1.595 1 1 1.581 1 2.298v15.403C1 18.418 1.595 19 2.328 19h15.34c.734 0 1.332-.582 1.332-1.299V2.298C19 1.581 18.402 1 17.668 1z" clip-rule="evenodd" />
                  </svg>
                </a>
              </div>
            </div>
            
            <!-- Donation CTA -->
            <a 
              href="/support"
              class="bg-mars-red hover:bg-mars-red/80 text-white px-6 py-3 rounded-lg font-medium transition-colors"
            >
              Support Mars Research
            </a>
          </div>
          
          <!-- Citations -->
          {data.citations.length > 0 && (
            <div class="mt-12 pt-8 border-t border-gray-800">
              <h3 class="font-display font-semibold text-white mb-6 text-xl">References</h3>
              <ol class="space-y-4">
                {data.citations.map((citation, index) => (
                  <li class="text-gray-400 text-sm">
                    <span class="font-mono text-mars-orange">[{index + 1}]</span>
                    <span class="ml-2">
                      {citation.authors && citation.authors.length > 0 && (
                        <span class="text-gray-300">{citation.authors.join(', ')}. </span>
                      )}
                      <span class="text-gray-200 font-medium">{citation.title}</span>
                      {citation.publication && (
                        <span class="italic">. {citation.publication}</span>
                      )}
                      {citation.year && (
                        <span> ({citation.year})</span>
                      )}
                      {citation.url && (
                        <a 
                          href={citation.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="text-mars-orange hover:text-mars-tan ml-2 underline"
                        >
                          [Link]
                        </a>
                      )}
                    </span>
                  </li>
                ))}
              </ol>
            </div>
          )}
        </footer>
      </div>
    </div>

    <!-- Related Articles -->
    {relatedArticles.length > 0 && (
      <section class="max-w-7xl mx-auto px-4 mt-16 pt-16 border-t border-gray-800">
        <h2 class="font-display font-bold text-white text-2xl mb-8">Related Articles</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {relatedArticles.slice(0, 3).map(article => (
            <a 
              href={`/blog/${article.slug}`}
              class="block bg-gray-900/50 backdrop-blur-sm rounded-lg p-6 border border-gray-800 hover:border-mars-orange/30 transition-colors group"
            >
              <div class="mb-3">
                <span class="bg-mars-red/20 text-mars-orange px-2 py-1 rounded text-xs font-medium">
                  {article.data.category.replace('-', ' ').toUpperCase()}
                </span>
              </div>
              <h3 class="font-display font-semibold text-white mb-2 group-hover:text-mars-orange transition-colors">
                {article.data.title}
              </h3>
              <p class="text-gray-400 text-sm mb-4 line-clamp-3">
                {article.data.description}
              </p>
              <div class="flex items-center gap-4 text-xs text-gray-500">
                <span>{formatDate(article.data.pubDate)}</span>
                <span>â€¢</span>
                <span>{Math.ceil(article.body.split(' ').length / 200)} min read</span>
              </div>
            </a>
          ))}
        </div>
      </section>
    )}
  </article>
</BaseLayout>

<style>
  .article-content {
    /* Enhanced typography for Gwern-style reading */
    font-size: 1.125rem;
    line-height: 1.7;
    color: theme('colors.gray.200');
  }

  .article-content h1,
  .article-content h2,
  .article-content h3,
  .article-content h4 {
    font-family: theme('fontFamily.display');
    font-weight: 700;
    color: theme('colors.white');
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .article-content h1 {
    font-size: 2.5rem;
    line-height: 1.2;
  }

  .article-content h2 {
    font-size: 2rem;
    line-height: 1.3;
  }

  .article-content h3 {
    font-size: 1.5rem;
    line-height: 1.4;
  }

  .article-content h4 {
    font-size: 1.25rem;
    line-height: 1.5;
  }

  .article-content p {
    margin-bottom: 1.5rem;
  }

  .article-content blockquote {
    border-left: 4px solid theme('colors.mars.orange');
    padding-left: 1.5rem;
    margin: 2rem 0;
    font-style: italic;
    color: theme('colors.gray.300');
  }

  .article-content ul,
  .article-content ol {
    margin: 1.5rem 0;
    padding-left: 1.5rem;
  }

  .article-content li {
    margin-bottom: 0.5rem;
  }

  .article-content code {
    background-color: theme('colors.gray.800');
    color: theme('colors.mars.tan');
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.9em;
  }

  .article-content pre {
    background-color: theme('colors.gray.900');
    border: 1px solid theme('colors.gray.700');
    border-radius: 0.5rem;
    padding: 1.5rem;
    margin: 2rem 0;
    overflow-x: auto;
  }

  .article-content pre code {
    background: none;
    padding: 0;
    color: theme('colors.gray.200');
  }

  /* Table of Contents Styling */
  .toc a[data-toc-level="2"] {
    padding-left: 0.5rem;
  }

  .toc a[data-toc-level="3"] {
    padding-left: 1rem;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .article-content {
      font-size: 1rem;
    }
    
    .article-content h1 {
      font-size: 2rem;
    }
    
    .article-content h2 {
      font-size: 1.5rem;
    }
    
    .article-content h3 {
      font-size: 1.25rem;
    }
  }
</style>

<script>
  // Table of Contents active link highlighting
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc a');
    const headings = document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]');
    
    if (tocLinks.length === 0 || headings.length === 0) return;
    
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.getAttribute('id');
          const tocLink = document.querySelector(`.toc a[href="#${id}"]`);
          
          if (tocLink) {
            if (entry.isIntersecting) {
              tocLinks.forEach(link => link.classList.remove('active'));
              tocLink.classList.add('active');
            }
          }
        });
      },
      {
        rootMargin: '-20% 0% -35% 0%',
        threshold: 0
      }
    );
    
    headings.forEach(heading => observer.observe(heading));
  });
  
  // Smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute('href'));
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    });
  });
</script>